{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Template to generate hosting for EVB",

  "Parameters": {
    "KeyName": {
      "Type": "String",
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the web server"
    },
  "GitURL": {
      "Type": "String",
      "Description" : "Clone URL for the projects git Repo. Requires the repo to have the app located in a WWW dir."
    },
    "InstanceType": {
      "Default": "t1.micro",
      "Type": "String",
      "Description" : "Type of EC2 instance for web server"
    },
    "OperatorEmail": {
      "Default": "aaron@evb.com",
      "Description": "Email address to notify if there are any operational issues",
      "Type": "String"
    },
    "WebServerPort": {
      "Default": "80",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "65535",
      "Description" : "TCP/IP port for the web server"
    },
  "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "NoEcho": "true",
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "NoEcho": "true",
      "Description" : "Password for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBAllocatedStorage": {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    },

    "DBInstanceClass": {
      "Default": "db.m1.small",
      "Description" : "The database instance type",
      "Type": "String",
      "AllowedValues" : [ "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "MultiAZDatabase": {
      "Default": "true",
      "Description" : "Create a multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    }
  },
  "Resources": {
    "S3Bucket" : {
          "Type" : "AWS::S3::Bucket",
          "Properties" : {
              "AccessControl" : "Private"
          }
      },
    "CPUAlarmHigh": {
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "10",
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "Period": "60",
        "AlarmActions": [
          {
            "Ref": "AlarmTopic"
          }
        ],
        "Namespace": "AWS/EC2",
        "InsufficientDataActions": [
          {
            "Ref": "AlarmTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "TooManyUnhealthyHostsAlarm": {
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "0",
        "AlarmDescription": "Alarm if there are too many unhealthy hosts.",
        "Period": "60",
        "AlarmActions": [
          {
            "Ref": "AlarmTopic"
          }
        ],
        "Namespace": "AWS/ELB",
        "InsufficientDataActions": [
          {
            "Ref": "AlarmTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": {
              "Ref": "ElasticLoadBalancer"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "UnHealthyHostCount"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "EC2SecurityGroup": {
      "Properties": {
        "SecurityGroupIngress": [
          {
            "FromPort": "22",
            "CidrIp": "0.0.0.0/0",
            "ToPort": "22",
            "IpProtocol": "tcp"
          },
          {
            "FromPort": {
              "Ref": "WebServerPort"
            },
            "CidrIp": "0.0.0.0/0",
            "ToPort": {
              "Ref": "WebServerPort"
            },
            "IpProtocol": "tcp"
          }
        ],
        "GroupDescription": "HTTP and SSH access"
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "RequestLatencyAlarmHigh": {
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "1",
        "AlarmDescription": "Alarm if there aren't any requests coming through",
        "Period": "60",
        "AlarmActions": [
          {
            "Ref": "AlarmTopic"
          }
        ],
        "Namespace": "AWS/ELB",
        "InsufficientDataActions": [
          {
            "Ref": "AlarmTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "LoadBalancerName",
            "Value": {
              "Ref": "ElasticLoadBalancer"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "Latency"
      },
      "Type": "AWS::CloudWatch::Alarm"
    },
    "ElasticLoadBalancer": {
      "Properties": {
        "Listeners": [
          {
            "InstancePort": {
              "Ref": "WebServerPort"
            },
            "PolicyNames": [
              "p1"
            ],
            "Protocol": "HTTP",
            "LoadBalancerPort": "80"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Timeout": "5",
          "Interval": "10",
          "UnhealthyThreshold": "5",
          "Target": {
            "Fn::Join": [
              "",
              [
                "HTTP:",
                {
                  "Ref": "WebServerPort"
                },"/"
              ]
            ]
          }
        },
        "AvailabilityZones": [
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "a"
              ]
            ]
          }
        ],
        "LBCookieStickinessPolicy": [
          {
            "CookieExpirationPeriod": "30",
            "PolicyName": "p1"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "WebServerGroup": {
      "Properties": {
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "MinSize": "1",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "AvailabilityZones": [
          {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "AWS::Region"
                },
                "a"
              ]
            ]
          }
        ],
        "MaxSize": "10"
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "AlarmTopic": {
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "OperatorEmail"
            },
            "Protocol": "email"
          }
        ]
      },
      "Type": "AWS::SNS::Topic"
    },
    "LaunchConfig": {
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "EC2SecurityGroup"
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
        "cd /tmp/\n",
        "git clone ",{"Ref" : "GitURL" } ," app\n",
        "cp -rf /tmp/app/www /var/\n"
                
               ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "GroupDescription": "Grant database access to web server",
        "DBSecurityGroupIngress": {
          "EC2SecurityGroupName": { "Ref": "EC2SecurityGroup" }
        }
      }
    },
    "MySQLDatabase": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine" : "MySQL",
        "DBName" : { "Ref": "DBName" },
        "MultiAZ" : { "Ref": "MultiAZDatabase" },
        "MasterUsername": { "Ref": "DBUsername" },
        "MasterUserPassword": { "Ref" : "DBPassword" },
        "DBInstanceClass": { "Ref" : "DBInstanceClass" },
        "DBSecurityGroups": [ { "Ref": "DBSecurityGroup" } ],
        "AllocatedStorage": { "Ref" : "DBAllocatedStorage" }
      }
    }
  },

  "Mappings" : {    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64" }
    },
    "AWSRegionArch2AMI" : {
      "us-east-1" : {  "64" : "ami-a53ebfcc" },
      "us-west-1" : {  "64" : "ami-a53ebfcc" },
      "eu-west-1" : {  "64" : "ami-a53ebfcc" },
      "ap-southeast-1" : {  "64" : "ami-a53ebfcc" },
      "ap-northeast-1" : {  "64" : "ami-a53ebfcc" }
    }
  },

  "Outputs": {
    "URL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      },
      "Description" : "Canvas URL of your facebook App. Cut and Paste this URL on your 'App on Facebook' Canvas URL field."
    },
    "S3BucketSecureURL" : {
        "Value" : { "Fn::Join" : [ "", [ "https://", { "Fn::GetAtt" : [ "S3Bucket", "DomainName" ] } ] ] },
        "Description" : "Name of S3 bucket to hold user uploaded files"
    },
    "BeanstalkRepositoryPath" : {
        "Value" : "/www/",
        "Description" : "Directory in which to deploy from"
    },
    "BeanstalkPort" : {
        "Value" : "22",
        "Description" : "Port in which to connect to"
    },
    "BeanstalkRemotePath" : {
        "Value" : "/var/www/",
        "Description" : "Where the app resides"
    },
    "git" : {
        "Value" : {"Ref" : "GitURL" },
        "Description" : "Location of GIT repo"
    },
    "DBEndPoint" : {
        "Value" : { "Fn::GetAtt": [ "MySQLDatabase", "Endpoint.Address" ] },
        "Description" : "MySql Host"
    },
    "DBUser" : {
        "Value" :  { "Ref" : "DBUsername" },
        "Description" : "MySql username"
    },
    "DBPass" : {
        "Value" :  { "Ref" : "DBPassword" },
        "Description" : "MySql username"
    }
  }
}